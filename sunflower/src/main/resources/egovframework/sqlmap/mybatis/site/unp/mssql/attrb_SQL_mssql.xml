<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="site.unp.cms.service.bbs.attrb.attrb">

	<select id="findAllFieldInfoDesc" parameterType="zvl" resultType="zvl">
        SELECT
				 ISNULL(b.FIELD_ID , 0 ) as FIELD_ID,
		         a.fieldName AS FIELD_NM,
		         ISNULL(b.FIELD_DC,a.fieldText) AS FIELD_DC,
		         b.FIELD_TY_CD,
		         b.LIST_USE_AT
		  FROM
		      	(SELECT   distinct
			       A.COLUMN_NAME  AS fieldName,
			       ISNULL(PARSENAME(REPLACE(CONVERT(varchar(128),B.VALUE), '(', '.'), 2) , CONVERT(varchar(128),B.VALUE))   AS fieldText
				FROM INFORMATION_SCHEMA.COLUMNS A , SYS.EXTENDED_PROPERTIES B
				WHERE B.MAJOR_ID = object_id(A.TABLE_NAME)
			 	AND A.ORDINAL_POSITION = B.MINOR_ID
                AND A.TABLE_NAME= LOWER(#{tableName})
		       ) a
		   LEFT OUTER JOIN
		       (SELECT *
		           FROM TB_FIELD_INFO
		          WHERE ATTRB_CD=#{attrbCd}
		         ) b
		       ON LOWER(REPLACE(a.fieldName,'_','')) = LOWER(b.FIELD_IEM_NM)
		ORDER BY  fieldName ASC
	</select>

	<select id="findAllAttrbInfo" resultType="zvl">
		  SELECT
		       a.ATTRB_CD,
		       a.ATTRB_NM,
			   a.ATTRB_DC,
		       a.REGIST_DT,
		       a.TABLE_NM
		  FROM TB_ATTRB_INFO a
		  ORDER BY a.REGIST_DT DESC
	</select>

	<select id="findOneAttrbInfoByAttrbCd" parameterType="string" resultType="zvl">
		  SELECT
		       a.ATTRB_CD,
		       a.ATTRB_NM,
			   a.ATTRB_DC,
		       a.REGIST_DT,
		       a.TABLE_NM
		  FROM TB_ATTRB_INFO a
		  WHERE a.ATTRB_CD = #{attrbCd}
	</select>

	<select id="findAllFieldInfo" parameterType="zvl" resultType="zvl">
		SELECT a.FIELD_ID,
		       a.ATTRB_CD,
		       a.ATTRB_TY_CD,
		       a.FIELD_IEM_NM,
		       a.FIELD_TY_CD,
		       a.FIELD_DC,
		       a.LIST_USE_AT
		  FROM TB_FIELD_INFO a
		  WHERE a.ATTRB_CD = #{attrbCd}
		<if test="attrbTyCd != null and attrbTyCd != ''">
			<![CDATA[	AND ATTRB_TY_CD = #{attrbTyCd} 		]]>
		</if>
		<if test="listUseAt != null and listUseAt != ''">
			<![CDATA[	AND LIST_USE_AT = #{listUseAt} 		]]>
		</if>
		  ORDER BY a.FIELD_ORDR ASC
	</select>

	<insert id="saveAttrbInfo" parameterType="zvl" >
		<![CDATA[
			INSERT INTO TB_ATTRB_INFO (
				ATTRB_CD,
				ATTRB_NM,
				ATTRB_DC,
				REGIST_DT,
				TABLE_NM
			)
			VALUES (
				#{attrbCd},
				#{attrbNm},
				#{attrbDc},
				GETDATE(),
				#{tableNm}
			)
		]]>
	</insert>

	<update id="modifyAttrbInfo" parameterType="zvl" >
		<![CDATA[
			UPDATE TB_ATTRB_INFO
			SET ATTRB_NM = #{attrbNm},
			    ATTRB_DC = #{attrbDc},
			    TABLE_NM = #{tableNm}
			WHERE ATTRB_CD = #{attrbCd}
		]]>
	</update>

	<select id="countFieldInfoByAttrbCd" parameterType="zvl" resultType="long">
		<![CDATA[
			SELECT COUNT(b.ATTRB_CD)
			FROM TB_BBS_MASTR A
			LEFT JOIN TB_ATTRB_INFO B ON a.BBS_ATTRB_CD = b.ATTRB_CD
			WHERE b.ATTRB_CD = #{attrbCd}
			GROUP BY a.BBS_ATTRB_CD
			ORDER BY COUNT(b.ATTRB_CD)
		]]>
	</select>

	<delete id="deleteAttrbInfoByAttrbCd" parameterType="string" >
		<![CDATA[
			DELETE FROM TB_ATTRB_INFO
			WHERE ATTRB_CD = #{attrbCd}
		]]>
	</delete>

	<insert id="saveFieldInfo" parameterType="zvl" >
		<selectKey resultType="Integer" order="BEFORE" keyProperty="fieldId">
			SELECT ISNULL(Max(FIELD_ID),0)+1 FROM TB_FIELD_INFO
		</selectKey>
		<![CDATA[
			INSERT INTO TB_FIELD_INFO (
				FIELD_ID,
				ATTRB_CD,
				ATTRB_TY_CD,
				FIELD_IEM_NM,
				FIELD_TY_CD,
				FIELD_DC,
				FIELD_ORDR,
				LIST_USE_AT
			)
			VALUES (
				#{fieldId},
				#{attrbCd},
				#{attrbTyCd},
				#{fieldIemNm},
				#{fieldTyCd},
				#{fieldDc},
				#{fieldOrdr},
				ISNULL(#{listUseAt},'N')
			)
		]]>
	</insert>

	<delete id="deleteFieldInfo" parameterType="zvl" >
		<![CDATA[
			DELETE FROM TB_FIELD_INFO
			WHERE ATTRB_CD = #{attrbCd}
			AND ATTRB_TY_CD = #{attrbTyCd}
		]]>
	</delete>

	<delete id="deleteFieldInfoByAttrbCd" parameterType="string" >
		<![CDATA[
			DELETE FROM TB_FIELD_INFO
			WHERE ATTRB_CD = #{attrbCd}
		]]>
	</delete>

	<select id="findAttrbTableInfo" parameterType="zvl" resultType="zvl">
		<![CDATA[
			SELECT
				'' AS TABLE_COMMENTS,
				A.TABLE_NAME,
				ISNULL(PARSENAME(REPLACE(CONVERT(varchar(128),B.VALUE), '(', '.'), 2) , CONVERT(varchar(128),B.VALUE)) AS COMMENTS,
				A.COLUMN_NAME AS COLUMN_NAME,
				A.DATA_TYPE,
				CONVERT(VARCHAR(16),A.CHARACTER_MAXIMUM_LENGTH) AS DATA_LENGTH,
				(
					select type_desc from
					INFORMATION_SCHEMA.KEY_COLUMN_USAGE AA, sys.objects BB
					WHERE AA.CONSTRAINT_NAME = OBJECT_NAME(OBJECT_ID)
					AND AA.TABLE_NAME = OBJECT_NAME(parent_object_id)
					AND BB.type_desc ='PRIMARY_KEY_CONSTRAINT'
					AND AA.TABLE_NAME = A.TABLE_NAME
					AND AA.COLUMN_NAME = A.COLUMN_NAME
				) AS pk,
				(
					select type_desc from
					INFORMATION_SCHEMA.KEY_COLUMN_USAGE AA, sys.objects BB
					WHERE AA.CONSTRAINT_NAME = OBJECT_NAME(OBJECT_ID)
					AND AA.TABLE_NAME = OBJECT_NAME(parent_object_id)
					AND BB.type_desc = 'FOREIGN_KEY_CONSTRAINT'
					AND AA.TABLE_NAME = A.TABLE_NAME
					AND AA.COLUMN_NAME = A.COLUMN_NAME
				) AS fk,
				CASE WHEN A.IS_NULLABLE = 'NO' THEN 'NOT NULL'
				ELSE ''
				END AS ISNUlLABLE

			FROM INFORMATION_SCHEMA.COLUMNS A
			INNER JOIN SYS.EXTENDED_PROPERTIES B ON B.MAJOR_ID = object_id(A.TABLE_NAME) AND A.ORDINAL_POSITION = B.MINOR_ID
			INNER JOIN dbo.TB_ATTRB_INFO C ON C.TABLE_NM = A.TABLE_NAME AND C.ATTRB_CD = #{attrbCd}
			LEFT OUTER JOIN (
				SELECT object_id(objname) AS TABLE_ID, VALUE
				FROM ::FN_LISTEXTENDEDPROPERTY(NULL, 'User','dbo','table',NULL, NULL, NULL)
			) D ON object_id(A.TABLE_NAME) = D.TABLE_ID
			ORDER BY A.TABLE_NAME, A.ORDINAL_POSITION ASC
		]]>
	</select>

	<select id="findTableInfo" parameterType="zvl" resultType="zvl">
		<![CDATA[
			SELECT
				D.VALUE AS TABLE_COMMENTS,
				A.TABLE_NAME,
				ISNULL(PARSENAME(REPLACE(CONVERT(varchar(128),B.VALUE), '(', '.'), 2) , CONVERT(varchar(128),B.VALUE)) AS COMMENTS,
				A.COLUMN_NAME AS COLUMN_NAME,
				A.DATA_TYPE,
				CONVERT(VARCHAR(16),A.CHARACTER_MAXIMUM_LENGTH) AS DATA_LENGTH,
				(
					select type_desc from
					INFORMATION_SCHEMA.KEY_COLUMN_USAGE AA, sys.objects BB
					WHERE AA.CONSTRAINT_NAME = OBJECT_NAME(OBJECT_ID)
					AND AA.TABLE_NAME = OBJECT_NAME(parent_object_id)
					AND BB.type_desc ='PRIMARY_KEY_CONSTRAINT'
					AND AA.TABLE_NAME = A.TABLE_NAME
					AND AA.COLUMN_NAME = A.COLUMN_NAME
				) AS pk,
				(
					select type_desc from
					INFORMATION_SCHEMA.KEY_COLUMN_USAGE AA, sys.objects BB
					WHERE AA.CONSTRAINT_NAME = OBJECT_NAME(OBJECT_ID)
					AND AA.TABLE_NAME = OBJECT_NAME(parent_object_id)
					AND BB.type_desc = 'FOREIGN_KEY_CONSTRAINT'
					AND AA.TABLE_NAME = A.TABLE_NAME
					AND AA.COLUMN_NAME = A.COLUMN_NAME
				) AS fk,
				CASE WHEN A.IS_NULLABLE = 'NO' THEN 'NOT NULL'
				ELSE ''
				END AS ISNUlLABLE

			FROM INFORMATION_SCHEMA.COLUMNS A
			INNER JOIN SYS.EXTENDED_PROPERTIES B ON B.MAJOR_ID = object_id(A.TABLE_NAME) AND A.ORDINAL_POSITION = B.MINOR_ID
			LEFT OUTER JOIN (
				SELECT object_id(objname) AS TABLE_ID, VALUE
				FROM ::FN_LISTEXTENDEDPROPERTY(NULL, 'User','dbo','table',NULL, NULL, NULL)
			) D ON object_id(A.TABLE_NAME) = D.TABLE_ID
			WHERE A.TABLE_NAME = #{tableName}
			ORDER BY A.TABLE_NAME, A.ORDINAL_POSITION ASC
		]]>
	</select>

	<select id="findAllTable" resultType="string">
		<![CDATA[
			SELECT TABLE_NAME
			FROM INFORMATION_SCHEMA.TABLES
			ORDER BY TABLE_NAME
		]]>
	</select>

</mapper>